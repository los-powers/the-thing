import base64
import os
from PyQt5 import QtWidgets, QtCore, QtGui
import signal
import sys
import tempfile
import time

REST_DURATION = 5
TOO_EARLY = 800
TOO_LATE = 1900
WORK_DURATION = 20


class PomodoroTimer(QtWidgets.QSystemTrayIcon):

    def __init__(self, work_icon_path, rest_icon_path, parent=None):
        super(PomodoroTimer, self).__init__()
        self.rest_icon = QtGui.QIcon(rest_icon_path)
        self.work_icon = QtGui.QIcon(work_icon_path)
        self.parent = parent

        self.cur_icon = self.work_icon
        self.setIcon(self.cur_icon)
        self.show()

        self.until = set_time(WORK_DURATION)

        menu = QtWidgets.QMenu(self.parent)
        menu.addAction('Exit')
        self.setContextMenu(menu)
        menu.triggered.connect(self.exit)
        self.display_msg_box()

    def display_msg_box(self):
        msgbox = QtWidgets.QMessageBox()
        msgbox.setIcon(QtWidgets.QMessageBox.Information)
        msgbox.setWindowIcon(self.cur_icon)
        if self.cur_icon == self.rest_icon:
            msgbox.setText('Rest until %s' % self.until)
        else:
            msgbox.setText('Work until %s' % self.until)
        msgbox.setFocus(True)
        msgbox.exec_()

    def exit(self):
        QtCore.QCoreApplication.exit()

    def update_icon(self):
        cur_time = int(time.strftime('%H%M'))
        if self.until <= cur_time:
            if self.cur_icon == self.rest_icon:
                self.cur_icon = self.work_icon
                self.until = set_time(WORK_DURATION)
            else:
                self.cur_icon = self.rest_icon
                self.until = set_time(REST_DURATION)
            self.setIcon(self.cur_icon)
            self.display_msg_box()


def find_already_running():
    if os.name == 'nt':
        # Ignore windows
        return
    run_count = 0
    pids = [pid for pid in os.listdir('/proc') if pid.isdigit()]
    for pid in pids:
        ps = open(os.path.join('/proc', pid, 'cmdline'), 'rb').read()
        args = ps.split('\0')
        if len(args) > 2:
            if sys.argv[0] in args:
                run_count += 1
                if run_count > 1:
                    print '%s is already running' % sys.argv[0]
                    sys.exit()


def tray_icon(work_icon_path, rest_icon_path):
    app = QtWidgets.QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    wdgt = QtWidgets.QWidget()
    trayIcon = PomodoroTimer(work_icon_path, rest_icon_path, parent=wdgt)
    qtimer = QtCore.QTimer()
    qtimer.timeout.connect(trayIcon.update_icon)
    qtimer.start(1000)
    trayIcon.show()
    sys.exit(app.exec_())


def set_time(offset=0):
    ret_time = int(time.strftime('%H%M')) + offset
    if ret_time % 100 / 60 > 0:
        ret_time = ret_time + 40
    return ret_time


WORK_IMAGE = """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"""

REST_IMAGE = """"""

if __name__ == '__main__':
    work_icon = tempfile.NamedTemporaryFile(delete=True)
    work_icon.write(base64.decodestring(WORK_IMAGE))
    work_icon.flush()
    rest_icon = tempfile.NamedTemporaryFile(delete=True)
    rest_icon.write(base64.decodestring(REST_IMAGE))
    rest_icon.flush()

    signal.signal(signal.SIGINT, signal.SIG_DFL)
    # find_already_running()
    tray_icon(work_icon.name, rest_icon.name)
